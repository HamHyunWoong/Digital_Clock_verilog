module decoer_selecter(clk_in1,clk_in2 ,bcd_in1,bcd_in2,bcd_in3,bcd_in4,bcd_in5,bcd_in6,bcd_in7,bcd_in_led,bcd_out1,bcd_out2,bcd_out3,bcd_out4,bcd_out5,bcd_out6,bcd_out7,bcd_out_led,bcd_out11,bcd_out22,bcd_out33,bcd_out44,bcd_out55,bcd_out66,bcd_out77,bcd_out_ledled,bcd_in11,bcd_in22,bcd_in33,bcd_in44,bcd_in55,bcd_in66,bcd_in77,bcd_in_ledled);





input clk_in1,clk_in2; 
input [3:0]bcd_in1;
input [3:0]bcd_in2;
input [3:0]bcd_in3;
input [3:0]bcd_in4;
input [3:0]bcd_in5;
input [3:0]bcd_in6;
input [3:0]bcd_in7;
input [3:0]bcd_in_led;

 
input [3:0]bcd_in11;
input [3:0]bcd_in22;
input [3:0]bcd_in33;
input [3:0]bcd_in44;
input [3:0]bcd_in55;
input [3:0]bcd_in66;
input [3:0]bcd_in77;
input [3:0]bcd_in_ledled;


output reg [3:0] bcd_out1;
output reg [3:0] bcd_out2;
output reg [3:0] bcd_out3;
output reg [3:0] bcd_out4;
output reg [3:0] bcd_out5;
output reg [3:0] bcd_out6;
output reg [3:0] bcd_out7;
output reg [3:0] bcd_out_led;

output reg [3:0] bcd_out11;
output reg [3:0] bcd_out22;
output reg [3:0] bcd_out33;
output reg [3:0] bcd_out44;
output reg [3:0] bcd_out55;
output reg [3:0] bcd_out66;
output reg [3:0] bcd_out77;
output reg [3:0] bcd_out_ledled;



always(1)
begin

	if(clk_in2 ==0) // clock
		begin
		bcd_out1 <=bcd_in1;
		bcd_out2 <=bcd_in2;
		bcd_out3 <=bcd_in3;
		bcd_out4 <=bcd_in4;
		bcd_out5 <=bcd_in5;
		bcd_out6 <=bcd_in6;
		bcd_out7 <=bcd_in7;
		bcd_out_led <=bcd_led;
		
		bcd_out11 <=0;
		bcd_out22 <=0;
		bcd_out33 <=0;
		bcd_out44 <=0;
		bcd_out55 <=0;
		bcd_out66 <=0;
		bcd_out77 <=0;
		bcd_out_ledled <=0;
		 
		
		end
	else if(clk_in2==0)
		begin
		end


end
endmodule